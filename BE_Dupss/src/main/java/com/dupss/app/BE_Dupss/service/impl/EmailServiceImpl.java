package com.dupss.app.BE_Dupss.service.impl;

import com.dupss.app.BE_Dupss.entity.Appointment;
import com.dupss.app.BE_Dupss.service.EmailService;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import java.io.UnsupportedEncodingException;
import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailServiceImpl implements EmailService {

    private final JavaMailSender mailSender;
    private final TemplateEngine templateEngine;
    
    @Value("${spring.mail.username}")
    private String fromEmail;


    @Async
    @Override
    public void sendAppointmentConfirmation(Appointment appointment) {
        try {
            log.info("B·∫Øt ƒë·∫ßu g·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·ªãch cho cu·ªôc h·∫πn ID: {}", appointment.getId());

            String subject = "X√°c nh·∫≠n ƒë·∫∑t l·ªãch t∆∞ v·∫•n th√†nh c√¥ng";

            Context context = new Context();
            context.setVariable("appointment", appointment);

            if (appointment.getStatus().equals("CONFIRMED") && appointment.getLinkMeet() != null) {
                context.setVariable("showMeetLink", true);
                context.setVariable("dupssMeetLink", appointment.getLinkMeet());
            } else {
                context.setVariable("showGoogleMeetLink", false);
            }

            String content = templateEngine.process("email/appointment-confirmation", context);
            if (content == null || content.trim().isEmpty()) {
                throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung email t·ª´ template");
            }

            sendEmail(appointment.getEmail(), subject, content);
            log.info("Email x√°c nh·∫≠n ƒë·∫∑t l·ªãch ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi: {}", appointment.getEmail());
        } catch (Exception e) {
            log.error("L·ªói khi g·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·ªãch cho cu·ªôc h·∫πn ID {}: {}",
                     appointment.getId(), e.getMessage(), e);
            // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng ch√≠nh
        }
    }
    
    @Async
    @Override
    public void sendAppointmentStatusUpdate(Appointment appointment, String previousStatus) {
        try {
            log.info("B·∫Øt ƒë·∫ßu g·ª≠i email c·∫≠p nh·∫≠t tr·∫°ng th√°i cho cu·ªôc h·∫πn ID: {}", appointment.getId());
            
            String subject = "C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·∫πn t∆∞ v·∫•n";
            
            Context context = new Context();
            context.setVariable("appointment", appointment);
            context.setVariable("statusChangeMessage", getStatusChangeMessage(appointment.getStatus(), previousStatus));

            if ("CONFIRMED".equals(appointment.getStatus()) && appointment.getLinkMeet() != null) {
                context.setVariable("showMeetLink", true);
                context.setVariable("dupssMeetLink", appointment.getLinkMeet());
            } else {
                context.setVariable("showGoogleMeetLink", false);
            }

            String content = templateEngine.process("email/appointment-confirmation", context);
            if (content == null || content.trim().isEmpty()) {
                throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung email t·ª´ template");
            }
            
            sendEmail(appointment.getEmail(), subject, content);
            log.info("Email c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi: {}", appointment.getEmail());
        } catch (Exception e) {
            log.error("L·ªói khi g·ª≠i email c·∫≠p nh·∫≠t tr·∫°ng th√°i cho cu·ªôc h·∫πn ID {}: {}", 
                     appointment.getId(), e.getMessage(), e);
            // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng ch√≠nh
        }
    }
    //send mail welcome
    @Async
    @Override
    public void sendWelcomeEmail(String toEmail, String userName) throws MessagingException, UnsupportedEncodingException {
        Context context = new Context();
        context.setVariable("userName", userName);

        String htmlContent = templateEngine.process("email/welcome-email", context); // "welcome-email.html" trong templates

        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, "UTF-8");

        helper.setFrom(fromEmail, "DUPSS Support");
        helper.setTo(toEmail);
        helper.setSubject("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi DUPSS");
        helper.setText(htmlContent, true);

        mailSender.send(message);
    }

    
    @Async
    @Override
    public void sendEmail(String to, String subject, String content) throws MessagingException, UnsupportedEncodingException {
        try {
            log.info("B·∫Øt ƒë·∫ßu g·ª≠i email ƒë·∫øn: {}, v·ªõi ti√™u ƒë·ªÅ: {}", to, subject);
            
            if (to == null || to.trim().isEmpty()) {
                throw new IllegalArgumentException("ƒê·ªãa ch·ªâ email ng∆∞·ªùi nh·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            }
            
            if (content == null || content.trim().isEmpty()) {
                throw new IllegalArgumentException("N·ªôi dung email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            }
            
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            
            helper.setFrom(fromEmail, "DUPSS Support");
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(content, true);
            
            mailSender.send(message);
            log.info("Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn: {}", to);
        } catch (MessagingException | UnsupportedEncodingException e) {
            log.error("L·ªói khi g·ª≠i email ƒë·∫øn {}: {}", to, e.getMessage());
            log.error("Chi ti·∫øt l·ªói:", e);
            throw e;
        } catch (Exception e) {
            log.error("L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i email ƒë·∫øn {}: {}", to, e.getMessage());
            log.error("Chi ti·∫øt l·ªói:", e);
            throw new MessagingException("Kh√¥ng th·ªÉ g·ª≠i email: " + e.getMessage(), e);
        }
    }

    @Async
    @Override
    public void sendEnrollmentSuccessEmail(String toEmail, String userName,
                                           String courseTitle, int duration,
                                           String instructor, String enrollDate) throws MessagingException, UnsupportedEncodingException {

        Context context = new Context();
        context.setVariable("userName", userName);
        context.setVariable("courseTitle", courseTitle);
        context.setVariable("duration", duration);
        context.setVariable("instructor", instructor);
        context.setVariable("enrollDate", enrollDate);

        String htmlContent = templateEngine.process("email/course-enroll-success", context);

        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, "UTF-8");

        helper.setFrom(fromEmail, "DUPSS Support");
        helper.setTo(toEmail);
        helper.setSubject("ƒêƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng");
        helper.setText(htmlContent, true);

        mailSender.send(message);
    }

    @Async
    @Override
    public void sendCourseCompletionEmail(String toEmail,
                                          String userName,
                                          String courseTitle,
                                          int duration,
                                          String instructor,
                                          String completedDate) throws MessagingException, UnsupportedEncodingException {

        Context context = new Context();
        context.setVariable("userName", userName);
        context.setVariable("courseTitle", courseTitle);
        context.setVariable("duration", duration);
        context.setVariable("instructor", instructor);
        context.setVariable("completedDate", completedDate);

        String htmlContent = templateEngine.process("email/course-completed", context);

        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(
                message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, "UTF-8");

        helper.setFrom(fromEmail, "DUPSS Support");
        helper.setTo(toEmail);
        helper.setSubject("üéì B·∫°n ƒë√£ ho√†n th√†nh kh√≥a h·ªçc th√†nh c√¥ng!");
        helper.setText(htmlContent, true);

        mailSender.send(message);
    }

    @Async
    @Override
    public void sendPasswordChangedEmail(String toEmail, String userName, LocalDateTime changeTime) throws MessagingException, UnsupportedEncodingException {
        try {
            log.info("B·∫Øt ƒë·∫ßu g·ª≠i email th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng ƒë·∫øn: {}", toEmail);
            
            Context context = new Context();
            context.setVariable("userName", userName);
            context.setVariable("changeTime", changeTime.format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss dd/MM/yyyy")));
            
            String htmlContent = templateEngine.process("email/password-changed", context);
            
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED, "UTF-8");
            
            helper.setFrom(fromEmail, "DUPSS Support");
            helper.setTo(toEmail);
            helper.setSubject("Th√¥ng b√°o: M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi");
            helper.setText(htmlContent, true);
            
            mailSender.send(message);
            log.info("Email th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn: {}", toEmail);
        } catch (Exception e) {
            log.error("L·ªói khi g·ª≠i email th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u ƒë·∫øn {}: {}", toEmail, e.getMessage());
            log.error("Chi ti·∫øt l·ªói:", e);
            throw e;
        }
    }

    private String getStatusChangeMessage(String newStatus, String previousStatus) {
        switch (newStatus) {
            case "CONFIRMED":
                return "Cu·ªôc h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Vui l√≤ng ƒë·∫£m b·∫£o tham gia ƒë√∫ng gi·ªù.";
            case "CANCELED":
                return "Cu·ªôc h·∫πn c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy. N·∫øu b·∫°n c·∫ßn ƒë·∫∑t l·∫°i, vui l√≤ng truy c·∫≠p trang web c·ªßa ch√∫ng t√¥i.";
            case "COMPLETED":
                return "Cu·ªôc h·∫πn c·ªßa b·∫°n ƒë√£ ho√†n th√†nh. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.";
            default:
                return "Tr·∫°ng th√°i cu·ªôc h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ " + 
                       getStatusVietnamese(previousStatus) + " th√†nh " + 
                       getStatusVietnamese(newStatus) + ".";
        }
    }
    
    private String getStatusVietnamese(String status) {
        switch (status) {
            case "PENDING":
                return "Ch·ªù x√°c nh·∫≠n";
            case "CONFIRMED":
                return "ƒê√£ x√°c nh·∫≠n";
            case "CANCELED":
                return "ƒê√£ h·ªßy";
            case "COMPLETED":
                return "ƒê√£ ho√†n th√†nh";
            default:
                return status;
        }
    }
} 